{"version":3,"sources":["components/Header.js","components/Person.js","components/Button.js","components/Display.js","components/PersonForm.js","components/Filter.js","services/persons.js","components/Footer.js","components/Notification.js","App.js","index.js"],"names":["Header","text","Person","person","name","number","Button","type","onClick","Display","persons","handleDelete","map","key","id","PersonForm","newName","newNumber","addPerson","handleName","handleNumber","onSubmit","value","onChange","placeholder","required","pattern","Filter","filter","handleFilter","baseUrl","newObj","axios","post","then","res","data","get","put","delete","Footer","style","color","fontStyle","fontSize","Notification","notification","className","msg","App","useState","setPersons","setNewName","setNewNumber","setFilter","setNotification","useEffect","personService","initialPersons","updatePersonNumber","updatedNumber","window","confirm","trim","toUpdatePerson","find","p","updatedPersonObj","resUpdatedPerson","catch","error","console","log","notifyUser","cleanStr","s","toLowerCase","filteredPersons","includes","setTimeout","e","target","preventDefault","inputPersonObj","resNewPerson","concat","err","response","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e821fafa.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ text }) => <h2>{text}</h2>;\n\nexport default Header;\n","import React from 'react';\n\n// Present Person with a name and number\nconst Person = ({ person }) => (\n  <>\n    {person.name} {person.number}\n  </>\n);\n\nexport default Person;\n","import React from 'react';\n\n// Reusable button component with optional props\nconst Button = ({ type, onClick, text }) => (\n  <button type={type} onClick={onClick}>\n    {text}\n  </button>\n);\n\nexport default Button;\n","import React from 'react';\nimport Person from './Person';\nimport Button from './Button';\n\n// Display each Person from persons\nconst Display = ({ persons, handleDelete }) =>\n  persons.map((person) => (\n    <li key={person.id}>\n      <Person person={person} />\n      <Button onClick={() => handleDelete(person.id, person.name)} text=\"delete\" />\n    </li>\n  ));\n\nexport default Display;\n","import React from 'react';\nimport Button from './Button';\n\n// Form structure\nconst PersonForm = ({ newName, newNumber, addPerson, handleName, handleNumber }) => (\n  <form onSubmit={addPerson}>\n    <div>\n      name:{' '}\n      <input\n        value={newName}\n        onChange={handleName}\n        placeholder=\"Input unique name\"\n        required\n      />\n    </div>\n\n    {/* Number input with regex pattern preventing characters */}\n    <div>\n      number:{' '}\n      <input\n        value={newNumber}\n        onChange={handleNumber}\n        placeholder=\"Use phone# format\"\n        pattern=\"^[+]{0,1}[(\\)\\-\\s\\./0-9]*$\"\n      />\n    </div>\n\n    <div>\n      <Button type=\"submit\" text=\"add\" />\n    </div>\n  </form>\n);\nexport default PersonForm;\n","import React from 'react';\n\n// Filter input to display only filtering persons\nconst Filter = ({ filter, handleFilter }) => (\n  <div>\n    filter shown with:{' '}\n    <input value={filter} onChange={handleFilter} placeholder=\"Search name...\" />\n  </div>\n);\n\nexport default Filter;\n","import axios from 'axios';\n\n// URL of server -- needs to be set-up in advance\n// const baseUrl = 'http://localhost:3001/persons'; // Pt2 - Original development\n// const baseUrl = 'http://localhost:3001/api/persons'; // Pt3 - Moved to backend\n// const baseUrl = 'https://guarded-woodland-94743.herokuapp.com/api/persons'; // Pt3 - Moved to Heroku server\nconst baseUrl = '/api/persons'; // Pt3 Using build --same address\n\n// CREATE\nconst create = (newObj) => axios.post(baseUrl, newObj).then((res) => res.data);\n\n// RETRIEVE\nconst getAll = () => axios.get(baseUrl).then((res) => res.data);\n\n// UPDATE\nconst update = (id, newObj) =>\n  axios.put(`${baseUrl}/${id}`, newObj).then((res) => res.data);\n\n// DELETE\nconst deleteReq = (id) => axios.delete(`${baseUrl}/${id}`).then((res) => res.data);\n\n// Export default an object with all 4 CRUD methods\nexport default { create, getAll, update, deleteReq };\n","import React from 'react';\n\nconst Footer = ({ text }) => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>{text}</em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\n\nconst Notification = ({ notification }) => {\n  if (!notification) return null;\n\n  return <div className={notification.type}>{notification.msg}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Display from './components/Display';\nimport PersonForm from './components/PersonForm';\nimport Filter from './components/Filter';\n\n// import axios from 'axios'; // Moved to ./services/personService.js\nimport personService from './services/persons';\nimport Footer from './components/Footer';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  // const [errorMsg, setErrorMsg] = useState(null);\n  // const [successMsg, setSuccessMsg] = useState(null);\n  const [notification, setNotification] = useState(null);\n\n  // RETRIEVE from server all persons at initial render\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => setPersons(initialPersons));\n  }, []);\n\n  /**\n   * Save person by creating a person object with appropriate props\n   * Also check for duplication and whether an update is needed\n   * [CREATE] & [UPDATE]\n   */\n  const addPerson = (e) => {\n    e.preventDefault(); // Prevent page refresh\n\n    const inputPersonObj = {\n      name: newName.trim(),\n      number: newNumber.trim(),\n      // ID handled on server side\n    };\n\n    // See if person exists\n    const toUpdatePerson = persons.find((p) => cleanStr(p.name) === cleanStr(newName));\n    // If they exist\n    if (typeof toUpdatePerson !== `undefined`)\n      // Ask to [UPDATE] the existing person\n      return updatePersonNumber(toUpdatePerson.id, inputPersonObj.number);\n\n    // POST to server and add the response (should be the same item)\n    // [CREATE]\n    personService\n      .create(inputPersonObj)\n\n      // Set state by adding resNewPerson/inputPersonObj to current persons IFF name doesn't exist\n      .then((resNewPerson) => {\n        setPersons(persons.concat(resNewPerson));\n        // console.log('response data', responsePerson); // C.LOG RESPONSE\n\n        // Clear the input fields\n        setNewName('');\n        setNewNumber('');\n\n        // Notify person of successful addition\n        notifyUser(`Added ${inputPersonObj.name}`);\n      })\n\n      .catch((err) => {\n        console.log(`Error adding person`, err.response.data);\n        notifyUser(`${err.response.data.error}`, `error`);\n      });\n  };\n\n  /**\n   * [UPDATE] the person with ID id with new number newNumber\n   * @param {number} id - Person ID of person being updated\n   * @param {number} updatedNumber - New phone # to be updated with\n   */\n  const updatePersonNumber = (id, updatedNumber) => {\n    // Ask to update the existing person\n    const updateConfirm = window.confirm(\n      `${newName.trim()} is already added to your contact; replace old number with a new one?`\n    );\n\n    // If user confirms\n    if (updateConfirm) {\n      // Find the person that match id of interest (param)\n      const toUpdatePerson = persons.find((p) => p.id === id);\n\n      // Make a copy of OG person, but update their phone #\n      const updatedPersonObj = {\n        ...toUpdatePerson,\n        number: updatedNumber,\n      };\n\n      // PUT request to update\n      personService\n        .update(toUpdatePerson.id, updatedPersonObj)\n\n        // Iterate persons and set person of interest to be the responseUpdatedPerson\n        .then((resUpdatedPerson) => {\n          setPersons(\n            persons.map((p) => (p.id !== toUpdatePerson.id ? p : resUpdatedPerson))\n          );\n          // Clear input fields\n          setNewName('');\n          setNewNumber('');\n\n          // Notify successful update\n          setNotification(`Updated ${updatedPersonObj.name}`);\n        })\n\n        // Updating a person who was already deleted...\n        .catch((error) => {\n          console.log(`Error while updating:`, error); // C.LOG ERROR\n          setPersons(persons.filter((p) => p.id !== id));\n          notifyUser(\n            `Information of ${updatedPersonObj.name} has already been removed from server`,\n            `error`\n          );\n        });\n    }\n  };\n\n  /**\n   * [DELETE] person of ID id\n   * Display name in alert to ask for confirmation before removal\n   * @param {number} id - ID of person being removed\n   * @param {string} name - Name of person being removed\n   */\n  const deletePerson = (id, name) => {\n    const deleteConfirm = window.confirm(`Delete ${name}?`);\n\n    // If user confirms to delete...\n    if (deleteConfirm) {\n      personService\n        .deleteReq(id)\n        .then(() => {\n          setPersons(persons.filter((person) => person.id !== id));\n          // Notify successful deletion\n          notifyUser(`Deleted ${name}`);\n        })\n\n        // Deleting already removed person\n        .catch((error) => {\n          console.log(`Error while deleting:`, error); // C.LOG ERROR\n          setPersons(persons.filter((p) => p.id !== id));\n          notifyUser(`${name} was already removed from server`, `error`);\n        });\n    }\n  };\n\n  //** */ Handlers /* **//\n\n  // Set newName with value from the input\n  const handleNameInput = (e) => setNewName(e.target.value);\n\n  // Set newNumber with value from the input\n  const handleNumberInput = (e) => setNewNumber(e.target.value);\n\n  // Set filterWith with value from the input\n  const handleFilter = (e) => setFilter(e.target.value);\n\n  //** */ Additional helper functions /* **//\n\n  // Clean up the strings for search, find, and add purposes\n  const cleanStr = (s) => s.toLowerCase().trim();\n\n  // Array of persons to be actually used to display (toDisplay)\n  // Display all or the filtered persons accordingly\n  const filteredPersons = persons.filter((person) =>\n    cleanStr(person.name).includes(cleanStr(filter))\n  );\n\n  // Set notification message and type to display\n  const notifyUser = (msg, type = 'success') => {\n    setNotification({ msg, type });\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header text=\"Phonebook\" className={'h1'} />\n      {/* <Notification msg={successMsg} type={`success`} /> */}\n      {/* <Notification msg={errorMsg} type={`error`} /> */}\n      <Notification notification={notification} />\n\n      <Filter filter={filter} handleFilter={handleFilter} />\n\n      <Header text=\"New Contact\" />\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        addPerson={addPerson}\n        handleName={handleNameInput}\n        handleNumber={handleNumberInput}\n      />\n\n      <Header text=\"Numbers\" />\n      <ul>\n        <Display persons={filteredPersons} handleDelete={deletePerson} />\n      </ul>\n\n      {/* Test Footer */}\n      <Footer text={`Test Footer: Phonebook contact app`} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}